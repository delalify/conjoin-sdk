import type { BaseConjoin } from '../core/base-conjoin'
import type { BillingPaymentIntentType } from '../types/billing/billing-payment-intent-types'
import type {
  CreateBillingPaymentIntentRequestType,
  ReadBillingPaymentIntentRequestType,
} from '../types/billing/request-types/billing-payment-intent-request-types'
import type { ConjoinBillingOptions } from '../types/conjoin/conjoin-types'

export class PaymentIntentResource {
  #client: BaseConjoin

  constructor(client: BaseConjoin) {
    this.#client = client
  }

  #buildPath(options: ConjoinBillingOptions, path?: string | string[]) {
    return `/billing/payment-intent/${options.projectId}/${options.entityId}${path ? `/${Array.isArray(path) ? path.join('/') : path}` : ''}`
  }

  /**
   * Create a payment intent.
   *
   * This is the fastest way to initiate a payment with Conjoin Billing. You can listen to the webhook to get the status of the payment,
   * and even save the payment method the customer used, depending on the `setup_future_usage` option.
   *
   * @param requestData - The payment intent data for the request.
   * @param options - The options for the request.
   * @returns The payment intent object.
   */
  async create(
    requestData: CreateBillingPaymentIntentRequestType,
    options: ConjoinBillingOptions
  ): Promise<BillingPaymentIntentType> {
    return this.#client.makeRequest<BillingPaymentIntentType>(this.#buildPath(options, 'create'), {
      method: 'POST',
      body: requestData,
    })
  }

  /**
   * Read a payment intent.
   *
   * Retrieves the payment intent with the given transaction reference id.
   *
   * @param referenceId - The transaction reference id of the payment intent. This reference id can be provided when creating a payment intent.
   * If one is not provided, it will be automatically generated by Conjoin Billing and returned as a response when the `create` method succeeds. It is recommended to
   * provide this transaction reference id when creating a payment intent, as it will make it easier to retrieve the payment intent later.
   * @param options - The options for the request.
   * @returns The payment intent object.
   */
  async get(referenceId: string, options: ConjoinBillingOptions): Promise<BillingPaymentIntentType> {
    return this.#client.makeRequest<BillingPaymentIntentType>(this.#buildPath(options), {
      method: 'GET',
      query: {
        reference_id: referenceId,
      },
    })
  }

  /**
   * List payment intents.
   *
   * Retrieves a list of payment intents.
   *
   * @param requestFilters - The filters for the request.
   * @param options - The options for the request.
   * @returns The payment intent objects.
   */
  async list(
    requestFilters: ReadBillingPaymentIntentRequestType,
    options: ConjoinBillingOptions
  ): Promise<BillingPaymentIntentType[]> {
    return this.#client.makeRequest<BillingPaymentIntentType[]>(this.#buildPath(options), {
      method: 'GET',
      query: requestFilters,
    })
  }

  /**
   * Verify a payment intent.
   *
   * Verifies the payment intent with the given transaction reference ID.
   *
   * @param referenceId - The transaction reference ID of the payment intent. See the `get` method for more information on the transaction reference ID.
   * @param options - The options for the request.
   * @returns The the status of the payment intent.
   */
  async verify(referenceId: string, options: ConjoinBillingOptions): Promise<BillingPaymentIntentType['status']> {
    return this.#client.makeRequest<BillingPaymentIntentType['status']>(
      this.#buildPath(options, `verify/${referenceId}`),
      {
        method: 'GET',
      }
    )
  }
}
